select(n)
filtered_dat <- cbind(filtered_dat_no, var = filtered_dat_yes$n  / (filtered_dat_no$n + filtered_dat_yes$n))
mapping_obj <- inner_join(filtered_dat ,anc.df, by="DISTRICT")
anc <- get_map("anchorage, AK", zoom = 8)
p <- ggmap(anc)
p +  geom_polygon(data = mapping_obj, aes(long,lat,group=DISTRICT, fill = var), alpha = 0.5)
ggplot(data = mapping_obj, aes(long,lat,group=DISTRICT, fill = var)) +
colnames(Senate_Votes)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
district_to_filter_for
district_to_filter_for <- read.csv("change_district_names_from_voting_to_map.csv")
district_to_filter_for
library(stringr)
library(dplyr)
dat <- read.table("results-precinct.txt",
sep=",",
col.names= c("DISTRICT", "Race" , "Value", "Party", "","n", ""),
fill=FALSE,
strip.white=TRUE,
row.names = NULL)
dat <- dat[,c(1,2,3,4,6)]
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
match_senate <- data.frame(Senate = substrRight(as.character(dat[str_detect(dat$Race, "SENATE"),]$Race), 1),
DISTRICT = dat[str_detect(dat$Race, "SENATE"),]$DISTRICT)
match_house <- data.frame(House = as.numeric(substrRight(as.character(dat[str_detect(dat$Race, "HOUSE"),]$Race), 2)),
DISTRICT = dat[str_detect(dat$Race, "HOUSE"),]$DISTRICT)
dat <- dat[str_detect(dat$Race, "MOA Proposition #1") |
str_detect(dat$Race, "UNITED STATES SENATOR") |
str_detect(dat$Race, "US REPRESENTATIVE") |
str_detect(dat$Race, "GOVERNOR/LT GOVERNOR"  ) |
str_detect(dat$Race, "Ballot Measure 2 - 13PSUM" ) |
str_detect(dat$Race, "Ballot Measure 3 - 13MINW") |
str_detect(dat$Race, "Ballot Measure 4 - 12BBAY" ) ,]
voting_precincts <- levels(factor(str_split_fixed(dat$DISTRICT, " ", 2)[,1]))
voting_precincts <- voting_precincts[voting_precincts != "District"]
names_to_change <- read.csv("change_district_names_from_voting_to_map.csv")
dat <- dat[dat$DISTRICT %in% names_to_change$voting,]
dat <- dat[dat$Value !=  "Number of Precincts for Race" &
dat$Value !=   "Number of Precincts Reporting" &
dat$Value !=   "Times Counted",]
dat <- dat[,-4]
dat <- inner_join(dat, match_senate, by = "DISTRICT")
dat <- inner_join(dat, match_house, by = "DISTRICT")
dat %>%
group_by(Race, Precinct) %>%
filter()
mutate()
voting_results <- dat
district_to_filter_for <- read.csv("change_district_names_from_voting_to_map.csv")
voting_results <- voting_results %>%
filter(DISTRICT %in% district_to_filter_for)
#Find difference in votes between yes and no
Yes_Votes <- voting_results %>%
unique() %>%
filter(Race %in% c("Ballot Measure 2 - 13PSUM", "Ballot Measure 3 - 13MINW", "Ballot Measure 4 - 12BBAY", "MOA Proposition #1")) %>%
filter(! Value == "Registered Voters") %>%
group_by(DISTRICT, Race) %>%
mutate(Difference = (n - (sum(n)) + n)) %>%
filter(Value == "YES") %>%
select(DISTRICT, Race, Difference) %>%
as.data.frame()
Yes_Votes <- spread(Yes_Votes, Race, Difference)
colnames(Yes_Votes) <- c(c("District", "Prop1", "Prop2", "Prop3", "Prop4"))
quantile(Yes_Votes[,2], 0.4)
Gov_Votes <- voting_results %>%
unique() %>%
filter(Race %in% c("GOVERNOR/LT GOVERNOR")) %>%
filter(! Value == "Registered Voters") %>%
group_by(DISTRICT) %>%
mutate(Difference = (n - (sum(n)) + n)) %>%
select(DISTRICT, Value, Difference) %>%
as.data.frame()
Gov_Votes <- spread(Gov_Votes, Value, Difference)
colnames(Gov_Votes) <- c("District", "Clift", "Myers", "Parnell", "Walker", "Write-in")
Gov_Votes <- Gov_Votes[,-6]
House_Votes <- voting_results %>%
unique() %>%
filter(Race %in% c("US REPRESENTATIVE")) %>%
filter(! Value == "Registered Voters") %>%
group_by(DISTRICT) %>%
mutate(Difference = (n - (sum(n)) + n)) %>%
select(DISTRICT, Value, Difference) %>%
as.data.frame()
House_Votes <- spread(House_Votes, Value, Difference)
colnames(House_Votes) <- c("District", "Dunbar", "McDermott", "Write-in 50", "Young")
House_Votes <- House_Votes[,-4]
Senate_Votes <- voting_results %>%
unique() %>%
filter(Race %in% c("UNITED STATES SENATOR")) %>%
filter(! Value == "Registered Voters") %>%
group_by(DISTRICT) %>%
mutate(Difference = (n - (sum(n)) + n)) %>%
select(DISTRICT, Value, Difference) %>%
as.data.frame()
Senate_Votes <- spread(Senate_Votes, Value, Difference)
colnames(Senate_Votes) <- c("District", "Begich", "Fish", "Gianoutsos", "Sullivan", "Write-in")
Senate_Votes <- Senate_Votes[,-6]
#hist(House_Votes[,5])
n_Votes <- voting_results %>%
unique() %>%
filter(Race %in% c("GOVERNOR/LT GOVERNOR")) %>%
filter(! Value == "Registered Voters") %>%
group_by(DISTRICT) %>%
mutate(Total_Votes = (sum(n))) %>%
select(DISTRICT, Total_Votes) %>%
unique() %>%
select(-DISTRICT)
app_data <- cbind(House_Votes, n_Votes, Gov_Votes, Senate_Votes, Yes_Votes)
app_data <- app_data[!duplicated(lapply(app_data, summary))]
save(app_data, file = "app_data.rda")
filtered_dat_yes <- dat %>%
filter(Race == "Ballot Measure 2 - 13PSUM") %>%
filter(Value == "YES") %>%
select(n)
filtered_dat_no <- dat %>%
filter(Race == "Ballot Measure 2 - 13PSUM") %>%
filter(Value == "NO") %>%
select(n)
filtered_dat_registered <- dat %>%
filter(Race == "Ballot Measure 2 - 13PSUM") %>%
filter(Value == "Registered Voters") %>%
select(n)
filtered_dat <- cbind(filtered_dat_no, var = filtered_dat_yes$n  / (filtered_dat_no$n + filtered_dat_yes$n))
mapping_obj <- inner_join(filtered_dat ,anc.df, by="DISTRICT")
anc <- get_map("anchorage, AK", zoom = 8)
p <- ggmap(anc)
p +  geom_polygon(data = mapping_obj, aes(long,lat,group=DISTRICT, fill = var), alpha = 0.5)
ggplot(data = mapping_obj, aes(long,lat,group=DISTRICT, fill = var)) +
shiny::runApp()
app_data
voting_results
voting_results <- dat
voting_results
voting_results %>%
filter(DISTRICT %in% district_to_filter_for)
district_to_filter_for
voting_results
district_to_filter_for
voting_results <- voting_results %>%
filter(DISTRICT %in% district_to_filter_for$voting)
voting_results
library(stringr)
library(dplyr)
dat <- read.table("results-precinct.txt",
sep=",",
col.names= c("DISTRICT", "Race" , "Value", "Party", "","n", ""),
fill=FALSE,
strip.white=TRUE,
row.names = NULL)
dat <- dat[,c(1,2,3,4,6)]
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
match_senate <- data.frame(Senate = substrRight(as.character(dat[str_detect(dat$Race, "SENATE"),]$Race), 1),
DISTRICT = dat[str_detect(dat$Race, "SENATE"),]$DISTRICT)
match_house <- data.frame(House = as.numeric(substrRight(as.character(dat[str_detect(dat$Race, "HOUSE"),]$Race), 2)),
DISTRICT = dat[str_detect(dat$Race, "HOUSE"),]$DISTRICT)
dat <- dat[str_detect(dat$Race, "MOA Proposition #1") |
str_detect(dat$Race, "UNITED STATES SENATOR") |
str_detect(dat$Race, "US REPRESENTATIVE") |
str_detect(dat$Race, "GOVERNOR/LT GOVERNOR"  ) |
str_detect(dat$Race, "Ballot Measure 2 - 13PSUM" ) |
str_detect(dat$Race, "Ballot Measure 3 - 13MINW") |
str_detect(dat$Race, "Ballot Measure 4 - 12BBAY" ) ,]
voting_precincts <- levels(factor(str_split_fixed(dat$DISTRICT, " ", 2)[,1]))
voting_precincts <- voting_precincts[voting_precincts != "District"]
names_to_change <- read.csv("change_district_names_from_voting_to_map.csv")
dat <- dat[dat$DISTRICT %in% names_to_change$voting,]
dat <- dat[dat$Value !=  "Number of Precincts for Race" &
dat$Value !=   "Number of Precincts Reporting" &
dat$Value !=   "Times Counted",]
dat <- dat[,-4]
dat <- inner_join(dat, match_senate, by = "DISTRICT")
dat <- inner_join(dat, match_house, by = "DISTRICT")
dat %>%
group_by(Race, Precinct) %>%
filter()
mutate()
voting_results <- dat
district_to_filter_for <- read.csv("change_district_names_from_voting_to_map.csv")
voting_results <- voting_results %>%
filter(DISTRICT %in% district_to_filter_for$voting)
#Find difference in votes between yes and no
Yes_Votes <- voting_results %>%
unique() %>%
filter(Race %in% c("Ballot Measure 2 - 13PSUM", "Ballot Measure 3 - 13MINW", "Ballot Measure 4 - 12BBAY", "MOA Proposition #1")) %>%
filter(! Value == "Registered Voters") %>%
group_by(DISTRICT, Race) %>%
mutate(Difference = (n - (sum(n)) + n)) %>%
filter(Value == "YES") %>%
select(DISTRICT, Race, Difference) %>%
as.data.frame()
Yes_Votes <- spread(Yes_Votes, Race, Difference)
colnames(Yes_Votes) <- c(c("District", "Prop1", "Prop2", "Prop3", "Prop4"))
quantile(Yes_Votes[,2], 0.4)
Gov_Votes <- voting_results %>%
unique() %>%
filter(Race %in% c("GOVERNOR/LT GOVERNOR")) %>%
filter(! Value == "Registered Voters") %>%
group_by(DISTRICT) %>%
mutate(Difference = (n - (sum(n)) + n)) %>%
select(DISTRICT, Value, Difference) %>%
as.data.frame()
Gov_Votes <- spread(Gov_Votes, Value, Difference)
colnames(Gov_Votes) <- c("District", "Clift", "Myers", "Parnell", "Walker", "Write-in")
Gov_Votes <- Gov_Votes[,-6]
House_Votes <- voting_results %>%
unique() %>%
filter(Race %in% c("US REPRESENTATIVE")) %>%
filter(! Value == "Registered Voters") %>%
group_by(DISTRICT) %>%
mutate(Difference = (n - (sum(n)) + n)) %>%
select(DISTRICT, Value, Difference) %>%
as.data.frame()
House_Votes <- spread(House_Votes, Value, Difference)
colnames(House_Votes) <- c("District", "Dunbar", "McDermott", "Write-in 50", "Young")
House_Votes <- House_Votes[,-4]
Senate_Votes <- voting_results %>%
unique() %>%
filter(Race %in% c("UNITED STATES SENATOR")) %>%
filter(! Value == "Registered Voters") %>%
group_by(DISTRICT) %>%
mutate(Difference = (n - (sum(n)) + n)) %>%
select(DISTRICT, Value, Difference) %>%
as.data.frame()
Senate_Votes <- spread(Senate_Votes, Value, Difference)
colnames(Senate_Votes) <- c("District", "Begich", "Fish", "Gianoutsos", "Sullivan", "Write-in")
Senate_Votes <- Senate_Votes[,-6]
#hist(House_Votes[,5])
n_Votes <- voting_results %>%
unique() %>%
filter(Race %in% c("GOVERNOR/LT GOVERNOR")) %>%
filter(! Value == "Registered Voters") %>%
group_by(DISTRICT) %>%
mutate(Total_Votes = (sum(n))) %>%
select(DISTRICT, Total_Votes) %>%
unique() %>%
select(-DISTRICT)
app_data <- cbind(House_Votes, n_Votes, Gov_Votes, Senate_Votes, Yes_Votes)
app_data <- app_data[!duplicated(lapply(app_data, summary))]
save(app_data, file = "app_data.rda")
filtered_dat_yes <- dat %>%
filter(Race == "Ballot Measure 2 - 13PSUM") %>%
filter(Value == "YES") %>%
select(n)
filtered_dat_no <- dat %>%
filter(Race == "Ballot Measure 2 - 13PSUM") %>%
filter(Value == "NO") %>%
select(n)
filtered_dat_registered <- dat %>%
filter(Race == "Ballot Measure 2 - 13PSUM") %>%
filter(Value == "Registered Voters") %>%
select(n)
filtered_dat <- cbind(filtered_dat_no, var = filtered_dat_yes$n  / (filtered_dat_no$n + filtered_dat_yes$n))
mapping_obj <- inner_join(filtered_dat ,anc.df, by="DISTRICT")
anc <- get_map("anchorage, AK", zoom = 8)
p <- ggmap(anc)
p +  geom_polygon(data = mapping_obj, aes(long,lat,group=DISTRICT, fill = var), alpha = 0.5)
ggplot(data = mapping_obj, aes(long,lat,group=DISTRICT, fill = var)) +
shiny::runApp()
shiny::runApp()
shiny::runApp()
?geom_bar
shiny::runApp()
df
order(df$vot_distance)
df$vote_distance
order(df$vote_distance)
shiny::runApp()
factor(df$District, order(df$vote_distance))
order(df$vote_distance)
df$District
shiny::runApp()
factor(df$District, order(df$vote_distance))
df$vote_distance)
df$vote_distance
df$District
order(df$vote_distance)
df$District
df$District
levels(df$District)
l
load("app_data.rda")
input <- list(House_Can = "Young", Gov_Can = "Walker", HouseQuantile = .75, GovQuantile = 0.6, Prop1Quantile = .3, Prop2Quantile = .5, Prop3Quantile = .5, Prop4Quantile = .2)
library(dplyr)
library(tidyr)
library(shiny)
library(ggplot2)
if(input$House_Can == "Dunbar")         {house_percentile <- quantile(app_data$Dunbar, input$HouseQuantile) }
if(input$House_Can == "McDermott")      {house_percentile <- quantile(app_data$McDermott, input$HouseQuantile)}
if(input$House_Can == "Young")          {house_percentile <- quantile(app_data$Young, input$HouseQuantile)}
if(input$Gov_Can == "Clift")           {gov_percentile <- quantile(app_data$Clift, input$GovQuantile) }
if(input$Gov_Can == "Myers")           {gov_percentile <- quantile(app_data$Myers, input$GovQuantile)}
if(input$Gov_Can == "Parnell")         {gov_percentile <- quantile(app_data$Parnell, input$GovQuantile)}
if(input$Gov_Can == "Walker")          {gov_percentile <- quantile(app_data$Walker, input$HouseQuantile)}
if(input$Gov_Can == "Clift")           {gov_percentile <- quantile(app_data$Clift, input$GovQuantile) }
if(input$Gov_Can == "Myers")           {gov_percentile <- quantile(app_data$Myers, input$GovQuantile)}
if(input$Gov_Can == "Parnell")         {gov_percentile <- quantile(app_data$Parnell, input$GovQuantile)}
if(input$Gov_Can == "Walker")          {gov_percentile <- quantile(app_data$Walker, input$HouseQuantile)}
if(input$Senate_Can == "Begich")           {sen_percentile <- quantile(app_data$Begich, input$SenateQuantile) }
if(input$Senate_Can == "Fish")             {sen_percentile <- quantile(app_data$Fish, input$SenateQuantile)}
if(input$Senate_Can == "Gianoutsos")       {sen_percentile <- quantile(app_data$Gianoutsos, input$SenateQuantile)}
if(input$Senate_Can == "Sullivan")         {sen_percentile <- quantile(app_data$Sullivan, input$SenateQuantile)}
one_percentile   <- quantile(app_data$Prop1, input$Prop1Quantile)
two_percentile   <- quantile(app_data$Prop2, input$Prop2Quantile)
three_percentile <- quantile(app_data$Prop3, input$Prop3Quantile)
four_percentile  <- quantile(app_data$Prop4, input$Prop3Quantile)
app_data <- app_data[, c("District","Total_Votes", input$House_Can, input$Senate_Can, input$Gov_Can, "Prop1", "Prop2",       "Prop3",       "Prop4")]
gov_diff   <- gov_percentile - app_data[,input$Gov_Can]
house_diff <- house_percentile - app_data[,input$House_Can]
sen_diff<- sen_percentile - app_data[,input$Senate_Can]
one_diff   <- one_percentile - app_data$Prop1
two_diff   <- two_percentile- app_data$Prop2
three_diff <- three_percentile - app_data$Prop3
four_diff  <- four_percentile - app_data$Prop4
vote_distance <- sqrt(
gov_diff^2    +
house_diff^2  +
sen_diff^2 +
one_diff^2    +
two_diff^2    +
three_diff^2  +
four_diff^2
)
df <- data.frame(District = app_data$District,
gov_diff,
house_diff,
one_diff,
two_diff,
three_diff,
four_diff,
vote_distance,
Total_Votes = app_data$Total_Votes)
input <- list(House_Can = "Young", Gov_Can = "Walker", Sen_Can = "Sullivan", HouseQuantile = .75, GovQuantile = 0.6, Prop1Quantile = .3, Prop2Quantile = .5, Prop3Quantile = .5, Prop4Quantile = .2)
load("app_data.rda")
if(input$House_Can == "Dunbar")         {house_percentile <- quantile(app_data$Dunbar, input$HouseQuantile) }
if(input$House_Can == "McDermott")      {house_percentile <- quantile(app_data$McDermott, input$HouseQuantile)}
if(input$House_Can == "Young")          {house_percentile <- quantile(app_data$Young, input$HouseQuantile)}
if(input$Gov_Can == "Clift")           {gov_percentile <- quantile(app_data$Clift, input$GovQuantile) }
if(input$Gov_Can == "Myers")           {gov_percentile <- quantile(app_data$Myers, input$GovQuantile)}
if(input$Gov_Can == "Parnell")         {gov_percentile <- quantile(app_data$Parnell, input$GovQuantile)}
if(input$Gov_Can == "Walker")          {gov_percentile <- quantile(app_data$Walker, input$HouseQuantile)}
if(input$Gov_Can == "Clift")           {gov_percentile <- quantile(app_data$Clift, input$GovQuantile) }
if(input$Gov_Can == "Myers")           {gov_percentile <- quantile(app_data$Myers, input$GovQuantile)}
if(input$Gov_Can == "Parnell")         {gov_percentile <- quantile(app_data$Parnell, input$GovQuantile)}
if(input$Gov_Can == "Walker")          {gov_percentile <- quantile(app_data$Walker, input$HouseQuantile)}
if(input$Senate_Can == "Begich")           {sen_percentile <- quantile(app_data$Begich, input$SenateQuantile) }
if(input$Senate_Can == "Fish")             {sen_percentile <- quantile(app_data$Fish, input$SenateQuantile)}
if(input$Senate_Can == "Gianoutsos")       {sen_percentile <- quantile(app_data$Gianoutsos, input$SenateQuantile)}
if(input$Senate_Can == "Sullivan")         {sen_percentile <- quantile(app_data$Sullivan, input$SenateQuantile)}
one_percentile   <- quantile(app_data$Prop1, input$Prop1Quantile)
two_percentile   <- quantile(app_data$Prop2, input$Prop2Quantile)
three_percentile <- quantile(app_data$Prop3, input$Prop3Quantile)
four_percentile  <- quantile(app_data$Prop4, input$Prop3Quantile)
app_data <- app_data[, c("District","Total_Votes", input$House_Can, input$Senate_Can, input$Gov_Can, "Prop1", "Prop2",       "Prop3",       "Prop4")]
gov_diff   <- gov_percentile - app_data[,input$Gov_Can]
house_diff <- house_percentile - app_data[,input$House_Can]
sen_diff<- sen_percentile - app_data[,input$Senate_Can]
one_diff   <- one_percentile - app_data$Prop1
two_diff   <- two_percentile- app_data$Prop2
three_diff <- three_percentile - app_data$Prop3
four_diff  <- four_percentile - app_data$Prop4
vote_distance <- sqrt(
gov_diff^2    +
house_diff^2  +
sen_diff^2 +
one_diff^2    +
two_diff^2    +
three_diff^2  +
four_diff^2
)
df <- data.frame(District = app_data$District,
gov_diff,
house_diff,
one_diff,
two_diff,
three_diff,
four_diff,
vote_distance,
Total_Votes = app_data$Total_Votes)
if(input$Senate_Can == "Sullivan")         {sen_percentile <- quantile(app_data$Sullivan, input$SenateQuantile)}
input$Senate_Can
input <- list(House_Can = "Young", Gov_Can = "Walker", Senate_Can = "Sullivan", HouseQuantile = .75, GovQuantile = 0.6, Prop1Quantile = .3, Prop2Quantile = .5, Prop3Quantile = .5, Prop4Quantile = .2)
if(input$Senate_Can == "Sullivan")         {sen_percentile <- quantile(app_data$Sullivan, input$SenateQuantile)}
input$Senate_Can == "Sullivan"
input <- list(House_Can = "Young", Gov_Can = "Walker", Senate_Can = "Sullivan",input$SenateQuantile= 0.5, HouseQuantile = .75, GovQuantile = 0.6, Prop1Quantile = .3, Prop2Quantile = .5, Prop3Quantile = .5, Prop4Quantile = .2)
input <- list(House_Can = "Young", Gov_Can = "Walker", Senate_Can = "Sullivan",input$SenateQuantile = 0.5, HouseQuantile = .75, GovQuantile = 0.6, Prop1Quantile = .3, Prop2Quantile = .5, Prop3Quantile = .5, Prop4Quantile = .2)
input <- list(House_Can = "Young", Gov_Can = "Walker", Senate_Can = "Sullivan",SenateQuantile = 0.5, HouseQuantile = .75, GovQuantile = 0.6, Prop1Quantile = .3, Prop2Quantile = .5, Prop3Quantile = .5, Prop4Quantile = .2)
if(input$Senate_Can == "Sullivan")         {sen_percentile <- quantile(app_data$Sullivan, input$SenateQuantile)}
load("app_data.rda")
if(input$House_Can == "Dunbar")         {house_percentile <- quantile(app_data$Dunbar, input$HouseQuantile) }
if(input$House_Can == "McDermott")      {house_percentile <- quantile(app_data$McDermott, input$HouseQuantile)}
if(input$House_Can == "Young")          {house_percentile <- quantile(app_data$Young, input$HouseQuantile)}
if(input$Gov_Can == "Clift")           {gov_percentile <- quantile(app_data$Clift, input$GovQuantile) }
if(input$Gov_Can == "Myers")           {gov_percentile <- quantile(app_data$Myers, input$GovQuantile)}
if(input$Gov_Can == "Parnell")         {gov_percentile <- quantile(app_data$Parnell, input$GovQuantile)}
if(input$Gov_Can == "Walker")          {gov_percentile <- quantile(app_data$Walker, input$HouseQuantile)}
if(input$Gov_Can == "Clift")           {gov_percentile <- quantile(app_data$Clift, input$GovQuantile) }
if(input$Gov_Can == "Myers")           {gov_percentile <- quantile(app_data$Myers, input$GovQuantile)}
if(input$Gov_Can == "Parnell")         {gov_percentile <- quantile(app_data$Parnell, input$GovQuantile)}
if(input$Gov_Can == "Walker")          {gov_percentile <- quantile(app_data$Walker, input$HouseQuantile)}
if(input$Senate_Can == "Begich")           {sen_percentile <- quantile(app_data$Begich, input$SenateQuantile) }
if(input$Senate_Can == "Fish")             {sen_percentile <- quantile(app_data$Fish, input$SenateQuantile)}
if(input$Senate_Can == "Gianoutsos")       {sen_percentile <- quantile(app_data$Gianoutsos, input$SenateQuantile)}
if(input$Senate_Can == "Sullivan")         {sen_percentile <- quantile(app_data$Sullivan, input$SenateQuantile)}
one_percentile   <- quantile(app_data$Prop1, input$Prop1Quantile)
two_percentile   <- quantile(app_data$Prop2, input$Prop2Quantile)
three_percentile <- quantile(app_data$Prop3, input$Prop3Quantile)
four_percentile  <- quantile(app_data$Prop4, input$Prop3Quantile)
app_data <- app_data[, c("District","Total_Votes", input$House_Can, input$Senate_Can, input$Gov_Can, "Prop1", "Prop2",       "Prop3",       "Prop4")]
gov_diff   <- gov_percentile - app_data[,input$Gov_Can]
house_diff <- house_percentile - app_data[,input$House_Can]
sen_diff<- sen_percentile - app_data[,input$Senate_Can]
one_diff   <- one_percentile - app_data$Prop1
two_diff   <- two_percentile- app_data$Prop2
three_diff <- three_percentile - app_data$Prop3
four_diff  <- four_percentile - app_data$Prop4
vote_distance <- sqrt(
gov_diff^2    +
house_diff^2  +
sen_diff^2 +
one_diff^2    +
two_diff^2    +
three_diff^2  +
four_diff^2
)
df <- data.frame(District = app_data$District,
gov_diff,
house_diff,
one_diff,
two_diff,
three_diff,
four_diff,
vote_distance,
Total_Votes = app_data$Total_Votes)
order(df$vote_distance)
df$District
factor(df$District, order(df$vote_distance))
df$District[order(df$vote_distance)]
shiny::runApp()
df$District[order(df$vote_distance)]
factor(df$District, df$District[order(df$vote_distance)])
df$District[order(df$vote_distance)]
df$District
df$District <- factor(df$District, df$District[order(df$vote_distance)])
df$District
df$District[order(df$vote_distance)]
df$District <- factor(df$District, as.character(df$District[order(df$vote_distance)]))
df$District
df$District
as.character(df$District[order(df$vote_distance)])
order(df$vote_distance)
sort(df$vote_distance)
df$District[order(df$vote_distance)]
as.character(df$District[order(df$vote_distance)])
df$District <- factor(df$District, levels = as.character(df$District[order(df$vote_distance)]))
df$District
shiny::runApp()
shiny::runApp()
df$vote_distance/df$Total_Votes
df$District <- factor(df$District, levels = as.character(df$District[order(df$vote_distance/df$Total_Votes)])
shiny::runApp()
order(df$vote_distance/df$Total_Votes)
df$District[order(df$vote_distance/df$Total_Votes)]
shiny::runApp()
shiny::runApp()
gov_diff
house_diff
sen_diff
one_diff
two_diff
three_diff
four_diff
df
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?titalPanel
?titlePanel
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
code4anc.png
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
